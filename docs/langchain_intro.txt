LangChain是一个基于语言模型开发应用程序的框架。它可以实现以下功能:

数据感知: 将语言模型与其他数据源连接起来
主体性: 允许语言模型与其环境进行交互
LangChain的主要价值包括:

组件: 用于处理语言模型的抽象，以及每个抽象的一系列实现。组件是模块化且易于使用的，无论您是否使用LangChain框架的其他部分，都可以轻松使用
现成的管道: 用于完成特定高级任务的结构化组件组合
现成的管道使得入门变得容易。对于更复杂的应用程序和细致入微的用例，组件使得自定义现有管道或构建新管道变得容易.

开始使用
这里是如何安装LangChain，设置您的环境并开始构建的方法.

我们建议按照我们的快速入门指南，通过构建您的第一个LangChain应用程序来熟悉该框架.

注意: 这些文档适用于LangChain的Python包。有关LangChain.js（JS/TS版本）的文档，请点击这里。

模块
LangChain为以下模块提供标准、可扩展的接口和外部集成，从最简单到最复杂的顺序列出:

模型 I/O
与语言模型进行接口

检索
与特定于应用程序的数据进行接口

管道
构建调用序列

代理
让管道根据高级指令选择使用哪些工具

内存
在管道运行期间保持应用程序状态

回调
记录和流式传输任何管道的中间步骤

示例、生态和资源
用例
步骤和最佳实践，涵盖常见的端到端用例，例如:

聊天机器人
使用数据源回答问题
分析结构化数据
等等...
指南
学习使用LangChain进行开发的最佳实践.

生态系统
LangChain是一个丰富的工具生态系统的一部分，它与我们的框架集成并在其之上构建。查看我们的日益增长的集成和依赖仓库列表。

其他资源
我们的社区充满了富有成效的开发人员、富有创造力的构建者和出色的教师。查看YouTube教程以获取来自社区成员的优秀教程，以及Gallery以获取由KyroLabs的人员编制的精彩LangChain项目列表。

社区
前往社区导航器以寻找提问、分享反馈、结识其他开发人员以及憧憬LLM的未来的场所。

API 参考
前往参考部分，完整文档介绍了LangChain Python包中的所有类和方法。